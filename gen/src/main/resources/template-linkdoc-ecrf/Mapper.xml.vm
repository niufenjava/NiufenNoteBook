<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="${modulePackage}.dao.${ClassName}Mapper">

    <!-- 单表查询字段Sql -->
    <sql id="baseColumnsSql">
    #foreach($column in $columns)
 m.${column.columnName}#if($foreach.hasNext),#end
#end

    </sql>

    <!-- 单表表名Sql -->
    <sql id="baseTableSql">
        ${tableName}
    </sql>

    <!-- 单表FromSql -->
    <sql id="baseFromSql">
        from
        <include refid="baseTableSql"/> m
    </sql>

    <!-- 单表查询条件Sql -->
    <sql id="baseQueryConditionSql">
        <where>
#foreach($column in $columns)#if($column.attrname != "deletedAt" && $column.attrname != "creatorId"
    && $column.attrname != "creatorName" && $column.attrname != "modifierId" && $column.attrname != "modifierName"
    && $column.attrname != "modifierName"
)

            <if test="qo.${column.attrname} != null">
                and m.${column.columnName} = #{qo.${column.attrname}}
            </if>#end
        #end


            <!-- 默认字段 -->
            <if test="qo.createdAt != null">
                and DATE_FORMAT(m.created_at,'%Y-%m-%d') = DATE_FORMAT(#{qo.createdAt},'%Y-%m-%d')
            </if>
            <if test="qo.startCreatedAt != null">
                <![CDATA[ and m.created_at >= #{qo.startCreatedAt} ]]>
            </if>
            <if test="qo.endCreatedAt != null">
                <![CDATA[ and m.created_at <= #{qo.endCreatedAt} ]]>
            </if>
            <if test="qo.creatorId != null">
                and m.creator_id = #{qo.creatorId}
            </if>
            <if test="qo.creatorName != null">
                and m.creator_name = #{qo.creatorName}
            </if>
            <if test="qo.modifiedAt != null">
                and DATE_FORMAT(m.modified_at,'%Y-%m-%d') = DATE_FORMAT(#{qo.modifiedAt},'%Y-%m-%d')
            </if>
            <if test="qo.startModifiedAt != null">
                <![CDATA[ and m.modified_at >= #{qo.startModifiedAt} ]]>
            </if>
            <if test="qo.endModifiedAt != null">
                <![CDATA[ and m.modified_at <= #{qo.endModifiedAt} ]]>
            </if>
            <if test="qo.modifierId != null">
                and m.modifier_id = #{qo.modifierId}
            </if>
            <if test="qo.modifierName != null">
                and m.modifier_name = #{qo.modifierName}
            </if>
            <if test="qo.isDeleted == null or qo.isDeleted == false">
                and m.deleted_at = '0000-00-00 00:00:00'
            </if>
            <if test="qo.ids != null">
                and m.id in
                <foreach item="id" index="index" collection="qo.ids"
                         open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
            <!-- 特殊处理字段 -->
            <if test="qo.keywordLike != null">
                and (m.name like CONCAT('%',#{qo.keywordLike},'%') or m.key_path like CONCAT('%',#{qo.keywordLike},'%') )
            </if>
            <if test="qo.encodingLike != null">
                and m.encoding like CONCAT('%',#{qo.encodingLike},'%')
            </if>
            <if test="qo.encodings != null">
                and m.encoding in
                <foreach item="encoding" index="index" collection="qo.encodings"
                         open="(" separator="," close=")">
                    #{encoding}
                </foreach>
            </if>

            <!-- 联表查询条件开始 -->

        </where>
    </sql>

    <!-- 单表更新字段Sql -->
    <sql id="baseSetSql">
        <set>
#foreach($column in $columns)
            #if($column.attrname != "id")<if test="entity.${column.attrname} != null"> m.${column.columnName}=#{entity.${column.attrname}},</if>#end

#end        </set>
    </sql>

    <!-- 单表IDs循环Sql -->
    <sql id="baseIdsSql">
        <foreach item="id" index="index" collection="idList"
                 open="(" separator="," close=")">
            #{id}
        </foreach>
    </sql>

    <!-- 单表排序Sql -->
    <sql id="baseSortSql">
        <if test="qo.sortConditionSql != null">
            order by ${qo.sortConditionSql}
        </if>
    </sql>

    <!-- 插入一条数据，ID由数据库自增，自动赋值到当前的 entity类 -->
    <insert id="insert" parameterType="${ClassName}Entity" useGeneratedKeys="true"
            keyProperty="id" keyColumn="id">
        insert into
        <include refid="baseTableSql"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
            <if test="entity.${column.attrname} != null"> ${column.columnName},</if>
#end

        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
            <if test="entity.${column.attrname} != null"> #{entity.${column.attrname}},</if>
#end

        </trim>
    </insert>


    <!-- 根据 ID 删除一条数据 -->
    <delete id="deleteById" parameterType="long">
        delete m
        <include refid="baseFromSql"/>
        where m.id = #{id}
    </delete>

    <!-- 根据 Qo 属性删除数据 -->
    <delete id="deleteByQo" parameterType="${ClassName}Qo">
        delete m
        <include refid="baseFromSql"/>
        <include refid="baseQueryConditionSql"/>
    </delete>

    <!-- 根据 Ids 批量删除 -->
    <delete id="deleteBatchIds" parameterType="collection">
        delete m
        <include refid="baseFromSql"/>
        where m.id in
        <include refid="baseIdsSql"/>
    </delete>

    <!-- 根据 ID 更新一条数据 -->
    <update id="updateById" parameterType="${ClassName}Entity">
        update
        <include refid="baseTableSql"/> m
        <include refid="baseSetSql"/>
        where m.id = #{entity.id}
    </update>

    <!-- 根据 Qo条件 更新一条数据 -->
    <update id="updateByQo">
        update
        <include refid="baseTableSql"/> m
        <include refid="baseSetSql"/>
        <include refid="baseQueryConditionSql"/>
    </update>

    <!-- 根据 ID 获取一个实体 -->
    <select id="getById" parameterType="long" resultType="${ClassName}Entity">
        select
        <include refid="baseColumnsSql"/>
        <include refid="baseFromSql"/>
        where m.id = #{id}
    </select>

    <!-- 根据 Qo条件 获取一个实体 -->
    <select id="getOneByQo" parameterType="${ClassName}Qo" resultType="${ClassName}Entity">
        SELECT
        <include refid="baseColumnsSql"/>
        <include refid="baseFromSql"/>
        <include refid="baseQueryConditionSql"/>
        limit 1
    </select>

    <!-- 根据IDs，进行列表查询 -->
    <select id="listBatchIds" parameterType="collection" resultType="${ClassName}Entity">
        SELECT
        <include refid="baseColumnsSql"/>
        <include refid="baseFromSql"/>
        where m.id in
        <include refid="baseIdsSql"/>
    </select>


    <!-- 根据 Map qo 查询条件，进行列表查询 -->
    <select id="listByQo" parameterType="${ClassName}Qo" resultType="${ClassName}Entity">
        SELECT
        <include refid="baseColumnsSql"/>
        <include refid="baseFromSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>

    <!-- 根据 Qo，进行分页查询 -->
    <select id="countByQo" parameterType="${ClassName}Qo" resultType="java.lang.Long">
        SELECT
        count(1)
        <include refid="baseFromSql"/>
        <include refid="baseQueryConditionSql"/>
    </select>

    <!-- 根据 Qo，进行分页查询 -->
    <select id="pageByQo" parameterType="${ClassName}Qo" resultType="${ClassName}Entity">
        SELECT
        <include refid="baseColumnsSql"/>
        <include refid="baseFromSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>

    <!-- 根据 Qo，进行可选项查询 -->
    <select id="listOptionByQo" parameterType="${ClassName}Qo" resultType="CommonOptionBO">
        SELECT
        <if test="qo.optionIdColumn != null">
            ${qo.optionIdColumn} as id,
        </if>
        <if test="qo.optionValueColumn != null">
            ${qo.optionValueColumn} as value,
        </if>
        ${qo.optionLabelColumn} as label
        <include refid="baseFromSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>

    <!-- 根据 Qo，进行Ids查询 -->
    <select id="listIdsByQo" parameterType="${ClassName}Qo" resultType="Long">
        SELECT id
        <include refid="baseFromSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>

    <!-- 自定义联表查询开始 -->
    <!-- 链表查询字段Sql -->
    <sql id="unionColumnsSql">

    </sql>

    <!-- 单表表名Sql -->
    <sql id="unionTableSql">

    </sql>


    <!-- 根据 ID 获取一个实体 -->
    <select id="getBoById" parameterType="long" resultType="${ClassName}Bo">
        select
        <include refid="baseColumnsSql"/>
        <include refid="unionColumnsSql"/>
        <include refid="baseFromSql"/>
        <include refid="unionTableSql"/>
        where m.id = #{id}
    </select>

    <!-- 根据 Qo条件 获取一个实体 -->
    <select id="getOneBoByQo" parameterType="${ClassName}Qo" resultType="${ClassName}Bo">
        SELECT
        <include refid="baseColumnsSql"/>
        <include refid="unionColumnsSql"/>
        <include refid="baseFromSql"/>
        <include refid="unionTableSql"/>
        <include refid="baseQueryConditionSql"/>
        limit 1
    </select>

    <!-- 根据 Map qo 查询条件，进行列表联表查询 -->
    <select id="listBoByQo" parameterType="${ClassName}Qo" resultType="${ClassName}Bo">
        SELECT
        <include refid="baseColumnsSql"/>
        <include refid="unionColumnsSql"/>
        <include refid="baseFromSql"/>
        <include refid="unionTableSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>

    <!-- 根据 Qo，进行联表分页查询 -->
    <select id="unionCountByQo" parameterType="${ClassName}Qo" resultType="java.lang.Long">
        SELECT
        count(1)
        <include refid="baseFromSql"/>
        <include refid="unionTableSql"/>
        <include refid="baseQueryConditionSql"/>
    </select>

    <!-- 根据 Qo，进行联表分页查询 -->
    <select id="pageBoByQo" parameterType="${ClassName}Qo" resultType="${ClassName}Bo">
        SELECT
        <include refid="baseColumnsSql"/>
        <include refid="unionColumnsSql"/>
        <include refid="baseFromSql"/>
        <include refid="unionTableSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>

    <!-- 根据 Qo，进行可选项联表查询 -->
    <select id="unionListOptionByQo" parameterType="${ClassName}Qo" resultType="CommonOptionBO">
        SELECT
        <if test="qo.optionIdColumn != null">
            ${qo.optionIdColumn} as id,
        </if>
        <if test="qo.optionValueColumn != null">
            ${qo.optionValueColumn} as value,
        </if>
        ${qo.optionLabelColumn} as label
        <include refid="baseFromSql"/>
        <include refid="unionTableSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>

    <!-- 根据 Qo，进行Ids联表查询 -->
    <select id="unionListIdsByQo" parameterType="${ClassName}Qo" resultType="Long">
        SELECT m.id
        <include refid="baseFromSql"/>
        <include refid="unionTableSql"/>
        <include refid="baseQueryConditionSql"/>
        <include refid="baseSortSql"/>
    </select>
</mapper>
